# -*- coding: utf-8 -*-
"""Inventory Creation - EasyBuy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IJyS4OI05sgRsBWvadWx1UjLhDL8UUu7

# IEEE Repo Reboot
## Inventory Creation for EasyBuy

Libraries
"""

# file uploading
# from google.colab import files
# data processing
import pandas as pd
import numpy as np
# util
import random
import requests
# webscraping
from bs4 import BeautifulSoup

"""### Uploading Data"""

# uploaded = files.upload()

df = pd.read_csv('inventory_data.csv')
df.head()

"""### Visualizing the Dataset"""

df.describe()

print(df['categories'].unique())

"""### Processing the Data

#### Removing Rows of Certain Categories
"""

# df = df[df['categories'] != 'Health & Personal Care']
# print(df['categories'].unique())

"""#### Mapping Categories

"""

categories = {
    "Beauty": "All Beauty",
    "All Beauty": "All Beauty",
    "Arts, Crafts & Sewing": "Arts, Crafts & Sewing",
    "Automotive": "Automotive",
    "Cell Phones & Accessories": "Cell Phones & Accessories",
    "Clothing, Shoes and Jewelry": "Clothing, Shoes and Jewelry",
    "Electronics": "Electronics",
    "All Electronics": "All Electronics",
    "Health & Personal Care": "Home and Kitchen",
    "Baby Products": "Home and Kitchen",
    "Baby": "Home & Kitchen",
    "Industrial & Scientific": "Industrial & Scientific",
    "Musical Instruments": "Musical Instruments",
    "Office Products": "Office Products",
    "Grocery & Gourmet Food": "Pantry",
    "Pet Supplies": "Pantry",
    "Sports & Outdoors": "Sports & Outdoors",
    "Tools & Home Improvement": "Tools & Home Improvement",
    "Patio, Lawn & Garden": "Tools & Home Improvement",
    "Appliances": "Tools & Home Improvements",
    "Toys & Games": "Toys & Games",
}

df['categories'] = df['categories'].map(categories)
print(df['categories'].unique())

# dropping rows with nan values
df = df.dropna()
print(df['categories'].unique())

"""### Posting Inventory onto the Server

#### Client
"""

# admin key
API_KEY = '18756c33-bed0-4f67-b29a-fd5211a7ca92'
# api endpoint
API_URL = 'http://localhost:5000/products/add'

headers = {
    "Content-type": "application/x-www-form-urlencoded",
    "Accept": "text/plain",
    "key": API_KEY
}


def generateImage(query):
    seartext = query
    count = "1"
    adlt = 'off'
    sear = seartext.strip()
    sear = sear.replace(' ', '+')
    URL = 'https://bing.com/images/search?q=' + \
        sear + '&safeSearch=' + adlt + '&count=' + count
    USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:65.0) Gecko/20100101 Firefox/65.0"
    headers = {"user-agent": USER_AGENT}
    resp = requests.get(URL, headers=headers)
    results = []
    soup = BeautifulSoup(resp.content, "html.parser")
    wow = soup.find('a', class_='iusc')
    return eval(wow['m'])['murl']


def create_product(name, category, desc):
    try:
        image = generateImage(name)
        # print(image)
        params = {
            'name': name,
            'category': category,
            'price': str(random.randrange(1, 100) * 100),
            'description': desc,
            'image': generateImage(name)
        }
        requests.post(API_URL, data=params, headers=headers)
    except Exception as e:
        print(name)


"""#### Posting"""

count = 0
for idx in df.index:
    name = df['title'][idx]
    desc = df['description'][idx]
    category = df['categories'][idx]
    if(random.random() < 0.25):
        count = count + 1
        create_product(name, category, desc)
        if count % 100 == 0:
            print(count)

print(count)
